<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.springboot.delivery.mapper.UserStoreMapper">
	<select id="storeCategory" parameterType="String"
		resultType="com.springboot.delivery.model.MenuCategory">
		select * from b_menu_category_tbl where store_id =
		#{store_id}
	</select>

	<select id="menuList" parameterType="Integer"
		resultType="com.springboot.delivery.model.MenuItem">
		select * from b_menu_item_tbl where menu_category_id =
		#{menu_category_id}
	</select>

	<select id="menuItemDetail" parameterType="Integer"
		resultType="com.springboot.delivery.model.MenuItem">
		select * from b_menu_item_tbl where menu_item_id =
		#{menu_item_id}
	</select>

	<select id="optionDetail" parameterType="Integer"
		resultType="com.springboot.delivery.model.OptionSet">
		SELECT
		o.option_id,
		o.option_name,
		o.option_price,
		o.store_id,
		o.menu_item_id,
		o.option_group_id,
		g.option_group_name,
		g.selection_type
		FROM
		b_option_tbl o
		LEFT JOIN
		b_option_group_tbl g
		ON
		o.option_group_id =
		g.option_group_id
		WHERE
		o.menu_item_id = #{menu_item_id}
	</select>

	<insert id="insertOrder"
		parameterType="com.springboot.delivery.model.OrderCart">
		insert into b_order_tbl (order_id, user_id, order_time)
		values(#{order_id},#{user_id},sysdate)
	</insert>

	<insert id="insertOrderDetail"
		parameterType="com.springboot.delivery.model.OrderCart">
		insert into
		b_order_detail_tbl(order_detail_id,order_id,store_id,user_id,store_address,order_status)
		values((SELECT COALESCE(MAX(order_detail_id), 0) + 1 FROM
		b_order_detail_tbl),#{order_id},#{store_id},#{user_id},#{store_address},#{order_status})
	</insert>

	<insert id="insertOrderOption"
		parameterType="com.springboot.delivery.model.OrderCart">
		insert into order_option_tbl(order_option_id,
		menu_item_id, option_group_id,
		option_id, order_id)
		values
		(#{order_option_id},
		#{menu_item_id},
		#{option_group_id},
		#{option_id},
		#{order_id}
		)

	</insert>
	<select id="getMaxCountOrderOption" resultType="Integer">

		select
		max(order_option_id) from order_option_tbl

	</select>

	<insert id="insertOrderItemQuantity"
		parameterType="com.springboot.delivery.model.OrderQuantity">

		insert into order_quantity_tbl
		values(#{order_option_id}, #{quantity},
		#{order_id})

	</insert>

	<select id="storeAddress" parameterType="String"
		resultType="String">
		select store_address from b_store_tbl where
		store_id=#{store_id}
	</select>

	<select id="getOrderByUserId" parameterType="String"
		resultType="com.springboot.delivery.model.OrderCart">
		SELECT order_id
		FROM b_order_detail_tbl
		WHERE user_id =
		#{user_id} AND order_status = 0
	</select>

	<select id="getOrderStatusByOrderId" parameterType="String"
		resultType="com.springboot.delivery.model.OrderCart">

		select order_id, order_status from b_order_detail_tbl where
		order_id =
		#{order_id} and order_status = '0'

	</select>

	<select id="getCartMenuDetails" parameterType="String"
		resultType="map">
		SELECT
		mi.menu_item_id,
		mi.menu_name,
		mi.price as menu_price,
		mi.image_name,
		mi.store_id,
		oo.order_option_id,
		o.order_id,
		oq.quantity,
		LISTAGG(ot.option_name, ', ') WITHIN GROUP (ORDER BY ot.option_name)
		as option_names,
		LISTAGG(TO_CHAR(ot.option_price), ', ') WITHIN GROUP
		(ORDER BY
		ot.option_name) as option_prices,
		SUM(COALESCE(ot.option_price, 0)) as total_option_price
		FROM
		b_order_tbl o
		JOIN
		b_order_detail_tbl odt ON o.order_id = odt.order_id
		JOIN
		order_option_tbl oo ON oo.order_id = o.order_id
		JOIN
		b_menu_item_tbl mi ON oo.menu_item_id = mi.menu_item_id
		LEFT JOIN
		b_option_tbl ot ON ot.option_id = oo.option_id
		LEFT JOIN
		order_quantity_tbl oq ON oq.order_option_id = oo.order_option_id
		WHERE
		o.user_id = #{user_id}
		AND
		odt.order_status = '0'
		GROUP BY
		mi.menu_item_id, mi.menu_name, mi.price, mi.image_name, mi.store_id,
		oo.order_option_id, o.order_id, oq.quantity
	</select>

	<select id="isMenuInCart" parameterType="String"
		resultType="String">
		SELECT order_id FROM (
		SELECT order_id FROM b_order_tbl
		WHERE user_id = #{user_id}
		AND EXISTS (
		SELECT 1 FROM b_order_detail_tbl
		WHERE b_order_detail_tbl.order_id = b_order_tbl.order_id
		AND
		order_status = 0
		)
		ORDER BY order_time DESC
		) WHERE ROWNUM = 1
	</select>

	<select id="checkOrder" parameterType="String"
		resultType="String">

		select order_id from b_order_detail_tbl where
		user_id=#{user_id} and
		order_status = '0'

	</select>

	<select id="findMatchingOptionId"
		parameterType="com.springboot.delivery.model.MatchingOptionParam"
		resultType="Integer">
		SELECT DISTINCT oo.ORDER_OPTION_ID
		FROM order_option_tbl oo
		WHERE
		oo.ORDER_ID = #{orderId}
		AND oo.MENU_ITEM_ID = #{menuItemId}
		AND (
		SELECT COUNT(1)
		FROM order_option_tbl
		WHERE ORDER_OPTION_ID =
		oo.ORDER_OPTION_ID
		) = #{optionCount}
		AND NOT EXISTS (
		SELECT 1
		FROM (
		<foreach collection="optionList" item="option"
			separator=" UNION ALL ">
			SELECT #{option.option_group_id} AS OPTION_GROUP_ID,
			#{option.option_id} AS OPTION_ID
			FROM DUAL
		</foreach>
		) opt
		WHERE NOT EXISTS (
		SELECT 1
		FROM order_option_tbl
		WHERE
		ORDER_OPTION_ID = oo.ORDER_OPTION_ID
		AND OPTION_GROUP_ID =
		opt.OPTION_GROUP_ID
		AND OPTION_ID = opt.OPTION_ID
		)
		)
		AND NOT EXISTS (
		SELECT 1
		FROM order_option_tbl
		WHERE ORDER_OPTION_ID =
		oo.ORDER_OPTION_ID
		AND NOT EXISTS (
		SELECT 1
		FROM (
		<foreach collection="optionList" item="option"
			separator=" UNION ALL ">
			SELECT #{option.option_group_id} AS OPTION_GROUP_ID,
			#{option.option_id} AS OPTION_ID
			FROM DUAL
		</foreach>
		) opt
		WHERE opt.OPTION_GROUP_ID = OPTION_GROUP_ID
		AND opt.OPTION_ID =
		OPTION_ID
		)
		)
		AND ROWNUM = 1
	</select>
	<update id="increaseQuantity"
		parameterType="com.springboot.delivery.model.QuantityUpdateParam">
		UPDATE order_quantity_tbl
		SET QUANTITY = QUANTITY +
		#{additionalQuantity}
		WHERE ORDER_OPTION_ID = #{orderOptionId}
		AND
		ORDER_ID = #{orderId}
	</update>

	<delete id="deleteItemInCart"
		parameterType="com.springboot.delivery.model.OrderCart">


		delete from order_option_tbl where order_option_id =
		#{order_option_id} and order_id = #{order_id}
	</delete>

	<delete id="deleteQuantityInCart"
		parameterType="com.springboot.delivery.model.OrderCart">

		delete from order_quantity_tbl where
		order_id=#{order_id}

	</delete>

	<select id="checkCountInCart" parameterType="String"
		resultType="Integer">

		select count(*) from order_option_tbl where
		order_id=#{order_id}

	</select>

	<delete id="deleteOrderDetail" parameterType="String">

		delete from
		b_order_detail_tbl where order_id=#{order_id}

	</delete>

	<delete id="deleteOrder" parameterType="String">

		delete from b_order_tbl
		where order_id=#{order_id}

	</delete>

	<select id="getOrderOptionId" parameterType="String"
		resultType="Integer">
		SELECT MAX(ORDER_OPTION_ID) FROM order_option_tbl WHERE
		ORDER_ID =
		#{orderId}
	</select>

	<select id="findOrderByUserId"
		parameterType="com.springboot.delivery.model.OrderCart"
		resultType="String">

		select order_id from b_order_detail_tbl where
		user_id=#{user_id} and order_status='0'

	</select>

	<select id="findStoreByMenuItemInCart"
		parameterType="com.springboot.delivery.model.OrderCart"
		resultType="String">

		select store_id from b_order_detail_tbl where
		user_id=#{user_id} and
		order_id=#{order_id} and
		order_status=#{order_status}

	</select>

	<delete id="deleteOrderQuantityInCart" parameterType="String">

		delete from
		order_quantity_tbl where order_id=#{order_id}

	</delete>

	<delete id="deleteOrderOptionInCart" parameterType="String">

		delete from
		order_option_tbl where order_id=#{order_id}

	</delete>

	<select id="getDeliveryFee" parameterType="String"
		resultType="Integer">

		select delivery_fee from b_store_tbl where
		store_id=#{store_id}

	</select>

	<select id="cartUserData" parameterType="String"
		resultType="com.springboot.delivery.model.CartUser">

		select user_phone, point, user_address from b_user_info
		where
		user_id=#{user_id}

	</select>

	<update id="insertPay"
		parameterType="com.springboot.delivery.model.OrderCart">

		update b_order_detail_tbl set
		toowner=#{toowner},torider=#{torider},
		order_status=#{order_status},
		totalprice=#{totalPrice} where
		order_id=#{order_id}


	</update>
	<update id="updateOrderStore"
		parameterType="com.springboot.delivery.model.OrderCart">
		UPDATE b_order_detail_tbl
		SET store_id = #{store_id},
		store_address = #{store_address}
		WHERE order_id = #{order_id}
	</update>
	<select id="getOrderListByUserId" parameterType="String"
		resultType="map">
		SELECT
		b.ORDER_ID,
		b.ORDER_TIME,
		d.ORDER_STATUS,
		s.STORE_ID,
		s.STORE_NAME,
		s.STORE_IMAGE_NAME,
		d.TOTALPRICE,
		(SELECT MIN(m.MENU_NAME)
		FROM
		order_option_tbl o
		JOIN
		b_menu_item_tbl m ON o.MENU_ITEM_ID =
		m.MENU_ITEM_ID
		WHERE o.ORDER_ID =
		b.ORDER_ID) AS main_menu_name,
		(SELECT
		COUNT(DISTINCT m.MENU_NAME) - 1
		FROM order_option_tbl o
		JOIN
		b_menu_item_tbl m ON o.MENU_ITEM_ID =
		m.MENU_ITEM_ID
		WHERE o.ORDER_ID =
		b.ORDER_ID) AS additional_menu_count
		FROM
		b_order_tbl b
		JOIN
		b_order_detail_tbl d ON b.ORDER_ID = d.ORDER_ID
		JOIN b_store_tbl s ON
		d.STORE_ID = s.STORE_ID
		WHERE
		b.USER_ID =
		#{user_id}
		AND d.ORDER_STATUS >
		0
		AND d.ORDER_STATUS != 5
		ORDER BY
		b.ORDER_TIME DESC
	</select>
	<select id="getOrderInfoByOrderId" parameterType="String"
		resultType="map">
		SELECT
		o.ORDER_ID,
		o.ORDER_TIME,
		od.ORDER_STATUS,
		s.STORE_NAME,
		s.STORE_PHONE AS store_phone,
		s.STORE_ADDRESS AS
		store_address,
		od.STORE_ADDRESS AS delivery_address,
		u.USER_PHONE,
		od.TOTALPRICE,
		(SELECT SUM(DISTINCT mi.PRICE * oq.QUANTITY)
		FROM
		order_option_tbl oo
		JOIN b_menu_item_tbl mi ON oo.MENU_ITEM_ID =
		mi.MENU_ITEM_ID
		JOIN order_quantity_tbl oq ON oo.ORDER_OPTION_ID =
		oq.ORDER_OPTION_ID
		WHERE oo.ORDER_ID = o.ORDER_ID
		GROUP BY
		oo.ORDER_OPTION_ID) AS menu_price,
		s.DELIVERY_FEE,
		0 AS discount_amount,
		od.TOOWNER AS message_to_owner,
		od.TORIDER AS message_to_rider,
		'Card'
		AS payment_method
		FROM
		b_order_tbl o
		JOIN b_order_detail_tbl od ON
		o.ORDER_ID = od.ORDER_ID
		JOIN b_store_tbl s ON od.STORE_ID = s.STORE_ID
		JOIN b_user_info u ON o.USER_ID = u.USER_ID
		WHERE
		o.ORDER_ID =
		#{orderId}
	</select>

	<select id="getOrderItemsByOrderId" parameterType="String"
		resultType="map">
		WITH menu_options AS (
		SELECT
		oo.ORDER_OPTION_ID,
		oo.MENU_ITEM_ID,
		mi.MENU_NAME,
		mi.PRICE AS menu_price,
		oq.QUANTITY,
		bo.OPTION_NAME,
		bo.OPTION_PRICE,
		bo.OPTION_ID,
		oo.OPTION_GROUP_ID
		FROM
		order_option_tbl oo
		JOIN b_menu_item_tbl mi ON oo.MENU_ITEM_ID =
		mi.MENU_ITEM_ID
		JOIN order_quantity_tbl oq ON oo.ORDER_OPTION_ID =
		oq.ORDER_OPTION_ID
		LEFT JOIN b_option_tbl bo ON oo.OPTION_ID =
		bo.OPTION_ID
		WHERE
		oo.ORDER_ID = #{orderId}
		)
		SELECT
		mo.ORDER_OPTION_ID,
		mo.MENU_ITEM_ID,
		mo.MENU_NAME,
		mo.menu_price,
		mo.QUANTITY,
		LISTAGG(mo.OPTION_NAME, '|') WITHIN GROUP (ORDER BY
		mo.OPTION_GROUP_ID, mo.OPTION_ID) AS
		option_names,
		SUM(NVL(mo.OPTION_PRICE, 0)) AS total_option_price,
		(mo.menu_price +
		SUM(NVL(mo.OPTION_PRICE, 0))) * mo.QUANTITY AS item_total_price
		FROM
		menu_options mo
		GROUP BY
		mo.ORDER_OPTION_ID, mo.MENU_ITEM_ID,
		mo.MENU_NAME, mo.menu_price, mo.QUANTITY
		ORDER BY
		mo.ORDER_OPTION_ID
	</select>

	<insert id="registerReview"
		parameterType="com.springboot.delivery.model.Review">

		INSERT INTO b_review_tbl (
		REVIEW_ID,
		STORE_ID,
		USER_ID,
		ORDER_ID,
		REVIEW_CONTENT,
		REVIEW_IMAGE_NAME,
		WRITE_DATE,
		RATING
		) VALUES (
		#{review_id}, #{store_id}, #{user_id}, #{order_id},
		#{review_content}
		,#{review_image_name}, sysdate, #{rating}
		)

	</insert>

	<select id="getMaxReviewId" parameterType="Integer">

		select
		max(review_id)
		from b_review_tbl
	</select>

<select id="getMyReviewList" parameterType="string" resultType="map">
    SELECT
        r.REVIEW_ID as "reviewId", 
        r.STORE_ID as "storeId", 
        r.USER_ID as "userId", 
        r.ORDER_ID as "orderId",
        r.REVIEW_TITLE as "reviewTitle", 
        r.REVIEW_CONTENT as "reviewContent", 
        r.REVIEW_IMAGE_NAME as "reviewImageName",
        r.WRITE_DATE as "reviewDate", 
        r.RATING as "rating",
        p.REPLY_ID as "replyId", 
        p.REPLY_CONTENT as "replyContent", 
        p.WRITE_DATE as "replyDate",
        p.OWNER_ID as "ownerId",
        s.STORE_NAME as "storeName",
        o.OWNER_NAME as "ownerName",
        o.OWNER_IMAGE_NAME as "ownerImageName"
    FROM b_review_tbl r
    LEFT JOIN b_store_tbl s ON r.STORE_ID = s.STORE_ID
    LEFT JOIN b_reply_tbl p ON r.ORDER_ID = p.ORDER_ID
    LEFT JOIN b_owner_info o ON p.OWNER_ID = o.OWNER_ID
    WHERE r.USER_ID = #{userId}
    ORDER BY r.WRITE_DATE DESC
</select>

	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="Integer">
		DELETE FROM b_review_tbl
		WHERE REVIEW_ID = #{review_id}
	</delete>

	<select id="getOrderInfoWithAddress" parameterType="String"
		resultType="com.springboot.delivery.model.OrderCart">
		SELECT b.USER_ADDRESS as user_address,
		o.ORDER_TIME as
		order_time,
		s.DELIVERY_TIME as delivery_time
		FROM b_user_info b
		JOIN
		b_order_tbl o ON b.USER_ID = o.USER_ID
		JOIN b_order_detail_tbl d ON
		o.ORDER_ID = d.ORDER_ID
		JOIN b_store_tbl s ON d.STORE_ID = s.STORE_ID
		WHERE o.ORDER_ID = #{orderId}
	</select>


	<select id="getStoreCouponList" parameterType="map"
		resultType="map">
		SELECT
		sc.store_coupon_id,
		sc.cp_name,
		oc.sale_price,
		sc.minimum_purchase,
		sc.expire_date,
		sc.owner_coupon_id,  <!-- 추가된 부분 -->
		CASE WHEN (SELECT COUNT(*) FROM b_user_coupon_tbl uc
		WHERE
		uc.store_coupon_id = sc.store_coupon_id
		AND uc.user_id = #{user_id}) >
		0
		THEN 1
		ELSE 0
		END AS isDownloaded
		FROM
		b_store_coupon_tbl sc
		JOIN
		b_owner_coupon_tbl oc ON sc.owner_coupon_id = oc.owner_coupon_id
		WHERE
		sc.store_id = #{store_id}
		AND sc.expire_date > SYSDATE
		AND (sc.quantity
		- sc.used_quantity) > 0
		ORDER BY
		sc.expire_date ASC
	</select>

	<select id="getUserCoupons" parameterType="String"
		resultType="map">
		SELECT
		uc.user_cp_id,
		uc.store_coupon_id,
		sc.cp_name,
		oc.sale_price,
		sc.minimum_purchase,
		uc.status
		FROM
		b_user_coupon_tbl uc
		JOIN
		b_store_coupon_tbl sc ON uc.store_coupon_id = sc.store_coupon_id
		JOIN
		b_owner_coupon_tbl oc ON uc.owner_coupon_id = oc.owner_coupon_id
		WHERE
		uc.user_id = #{userId}
		AND uc.status = 1  <!-- 사용 가능한 쿠폰만 -->
		ORDER BY
		oc.sale_price DESC
	</select>

	<select id="getAllMenusByStoreId" parameterType="String"
		resultType="com.springboot.delivery.model.MenuItem">
		select * from b_menu_item_tbl where store_id = #{store_id}
	</select>

	<update id="insertCouponId"
		parameterType="com.springboot.delivery.model.UserCoupon">

		update b_order_tbl set user_cp_id=#{user_cp_id} where
		user_id = #{user_id}
		and order_id = #{order_id}

	</update>

	<select id="checkReviewExists" parameterType="String"
		resultType="int">
		SELECT COUNT(*)
		FROM b_review_tbl
		WHERE ORDER_ID =
		#{order_id}
	</select>
<select id="getReviewDetail" parameterType="String" resultType="map">
    SELECT
        r.REVIEW_ID as "reviewId", 
        r.STORE_ID as "storeId", 
        r.USER_ID as "userId", 
        r.ORDER_ID as "orderId", 
        r.REVIEW_TITLE as "reviewTitle", 
        r.REVIEW_CONTENT as "reviewContent", 
        r.REVIEW_IMAGE_NAME as "reviewImageName", 
        r.WRITE_DATE as "reviewDate", 
        r.RATING as "rating",
        p.REPLY_ID as "replyId", 
        p.STORE_ID as "replyStoreId",
        p.OWNER_ID as "ownerId", 
        p.ORDER_ID as "replyOrderId", 
        p.REPLY_CONTENT as "replyContent", 
        p.WRITE_DATE as "replyDate"
    FROM 
        B_REVIEW_TBL r
    LEFT JOIN 
        B_REPLY_TBL p ON r.ORDER_ID = p.ORDER_ID
    WHERE 
        r.ORDER_ID = #{order_id}
</select>

<select id="getPayPassword" parameterType="String" resultType="Integer">
	select pay_password from b_user_info where user_id = #{user_id}
</select>

<select id="getPoint" parameterType="String" resultType="Integer">
	select point from b_user_info where user_id = #{user_id}
</select>

<update id="updatePoint" parameterType="com.springboot.delivery.model.User">
	update b_user_info set point = #{point} where user_id = #{user_id}
</update>

<select id="getOrderStatus" parameterType="String" resultType="com.springboot.delivery.model.OrderCart">
    SELECT 
        o.ORDER_ID as order_id,
        o.ORDER_TIME as order_time,
        u.USER_ADDRESS as user_address,
        d.TOTALPRICE as totalPrice,
        s.DELIVERY_TIME as delivery_time,
        d.ORDER_STATUS as order_status
    FROM 
        b_order_tbl o
        JOIN b_user_info u ON o.USER_ID = u.USER_ID
        JOIN b_order_detail_tbl d ON o.ORDER_ID = d.ORDER_ID
        JOIN b_store_tbl s ON d.STORE_ID = s.STORE_ID
    WHERE 
        o.ORDER_ID = #{orderId}
</select>

<update id="updateUserCoupon" parameterType="com.springboot.delivery.model.UserCoupon">

	update b_order_tbl set user_cp_id = #{user_cp_id} where order_id=#{order_id}

</update>

<update id="updateUserCouponStatus" parameterType="Integer">

	update b_user_coupon_tbl set status = 0 where user_cp_id = #{user_cp_id}

</update>

<select id="getCouponInfoById" parameterType="Integer" resultType="map">
    SELECT 
        uc.user_cp_id,
        uc.store_coupon_id,
        uc.owner_coupon_id,
        sc.cp_name,
        oc.sale_price,
        sc.minimum_purchase
    FROM 
        b_user_coupon_tbl uc
    JOIN 
        b_store_coupon_tbl sc ON uc.store_coupon_id = sc.store_coupon_id
    JOIN 
        b_owner_coupon_tbl oc ON uc.owner_coupon_id = oc.owner_coupon_id
    WHERE 
        uc.user_cp_id = #{userCouponId}
</select>

<select id="getMaxCountUsedCoupon">

	select max(used_cp_id) from b_used_coupon_tbl

</select>

<insert id="insertUsedCoupon" parameterType="com.springboot.delivery.model.UsedCoupon">

insert into b_used_coupon_tbl(used_cp_id, order_id, user_id, used_date, store_coupon_id, owner_coupon_id, user_cp_id)
values(#{user_cp_id}, #{order_id}, #{user_id}, #{used_date}, #{store_coupon_id}, #{owner_coupon_id}, #{user_cp_id})

</insert>

</mapper>